
  Analysis completed


==============================================
        REQUIREMENT NUMBER 1
==============================================

 -->The entire project has been built on Visual Studio 2015 using C++ windows Console.
  The Project can be checked to verify this requirement.

==============================================
        REQUIREMENT NUMBER 2
==============================================

 -->C++ standard libraries have been used in the entire project.
   The project can be checked to verify this!!

==============================================
        REQUIREMENT NUMBER 3
==============================================

 -->All Packages that have been defined in the PURPOSE section have been included in the Project.
        -->TypeAnalyzer, DepAnal, StrongComponents, Display, NoSqlDB, TestExecutive!!
 -->The project can be checked to verify this requirement.
===============================================
         REQUIREMENT NUMBER 8
===============================================

The following paths have been taken from command line arguments in the code analyzer project:
 --> Path to directory tree containing files to analyze: ../FilesToTest/
 --> List of file patterns to match for selection of files: *.h
 --> Specification of xml result file:
         -->Argument Present in cmd line for dependency analysis result file. Path is: ../XmlResult/DepAnalResult.xml
         -->Argument Present in cmd line for strong component analysis result file. Path is: ../XmlResult/StrongComponent.xml

==============================================
        REQUIREMENT NUMBER 4
==============================================

 -->A TypeAnalysis Package is provided that contains the type table in the form of a map. (Requirement Number 3)
 -->Traversing the AST to fill the type table...
 -->Type Table Constructed. Below it is displayed!! The DISPLAY Package takes care of displaying the type table, as a requirement defined in the purpose section (Also Requirement 3)

===============================================================================================================
                                                 TYPE TABLE
===============================================================================================================


  Type: namespace
  Name of the type: Global Namespace
  File Name (with absolute path): NULL
  Namespace to which it belongs: Global Namespace
----------------------------------------------------------------------------------------------------


  Type: struct
  Name of the type: x
  File Name (with absolute path): S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileA.h
  Namespace to which it belongs: Global Namespace
----------------------------------------------------------------------------------------------------


  Type: class
  Name of the type: FileB
  File Name (with absolute path): S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileB.h
  Namespace to which it belongs: Global Namespace
----------------------------------------------------------------------------------------------------


  Type: Global function
  Name of the type: abc
  File Name (with absolute path): S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileA.h
  Namespace to which it belongs: Global Namespace
----------------------------------------------------------------------------------------------------


  Type: namespace
  Name of the type: TestA
  File Name (with absolute path): S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileA.h
  Namespace to which it belongs: Global Namespace
----------------------------------------------------------------------------------------------------


  Type: Global function
  Name of the type: def
  File Name (with absolute path): S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileA.h
  Namespace to which it belongs: TestA
----------------------------------------------------------------------------------------------------


  Type: class
  Name of the type: FileC
  File Name (with absolute path): S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileC.h
  Namespace to which it belongs: TestC
----------------------------------------------------------------------------------------------------


  Type: Global function
  Name of the type: xyz
  File Name (with absolute path): S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileC.h
  Namespace to which it belongs: Global Namespace
----------------------------------------------------------------------------------------------------


  Type: enum
  Name of the type: Color
  File Name (with absolute path): S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileA.h
  Namespace to which it belongs: TestA
----------------------------------------------------------------------------------------------------


  Type: class
  Name of the type: FileA
  File Name (with absolute path): S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileA.h
  Namespace to which it belongs: TestA
----------------------------------------------------------------------------------------------------


  Type: class
  Name of the type: FileA
  File Name (with absolute path): S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileC.h
  Namespace to which it belongs: TestC
----------------------------------------------------------------------------------------------------


  Type: namespace
  Name of the type: TestC
  File Name (with absolute path): S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileC.h
  Namespace to which it belongs: Global Namespace
----------------------------------------------------------------------------------------------------


  Type: Global function
  Name of the type: pqr
  File Name (with absolute path): S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileC.h
  Namespace to which it belongs: TestC
----------------------------------------------------------------------------------------------------


  Type: class
  Name of the type: FileD
  File Name (with absolute path): S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileD.h
  Namespace to which it belongs: Global Namespace
----------------------------------------------------------------------------------------------------


==============================================
        REQUIREMENT NUMBER 5
==============================================

 -->A DepAnal Package is provided that analysis all the dependencies between files in a file collection. (Requirement Number 3)
 -->The folder path (provided as a command line argument) that contains the files to analyse is: S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\
 -->Getting all the files from the specified path to start the Analysis.
 -->Analyzer started. Running the tokenizer against the type table to get all the dependencies.
 -->Analysis Completed!! Dependency table constructed!!
 -->Below the Dependency table is displayed!! The DISPLAY Package takes care of displaying the Dependency table, as a requirement defined in the purpose section (Also Requirement 3)

 ===================================================================================
                 DEPENDENCY TABLE
 ===================================================================================

 FileName: S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileA.h
   Dependencies: S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileB.h
                 S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileC.h


----------------------------------------------------------------------------------------------------

 FileName: S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileB.h
   Dependencies: S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileC.h


----------------------------------------------------------------------------------------------------

 FileName: S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileC.h
   Dependencies: S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileA.h
                 S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileD.h


----------------------------------------------------------------------------------------------------

 FileName: S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileD.h
   Dependencies: No External Dependencies!!

----------------------------------------------------------------------------------------------------


 ------------------ END OF DEPENDENCY TABLE ------------------------

 -->The Dependencies have been stored to the NoSqlDatabase.

 The database is displayed below: (NoSqlDB Requirement defined in the purpose section is fulfilled here!!)

    Key      : S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileA.h
    name     : S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileA.h
    timeDate : 2017-08-06.18:44:34
    children : S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileB.h
                S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileC.h


    Key      : S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileB.h
    name     : S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileB.h
    timeDate : 2017-08-06.18:44:34
    children : S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileC.h


    Key      : S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileC.h
    name     : S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileC.h
    timeDate : 2017-08-06.18:44:34
    children : S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileA.h
                S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileD.h


    Key      : S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileD.h
    name     : S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileD.h
    timeDate : 2017-08-06.18:44:34
    children : NULL



==============================================
        REQUIREMENT NUMBER 6
==============================================

 -->A StrongComponents package has been defined that analyses strong components on the dependency analysis result. (Requirement Number 3)
 -->Analyzing Strong Components..
 -->Analysis Completed!!
 -->Below are the Strong Components displayed!! The DISPLAY Package takes care of displaying the Strong Components, as a requirement defined in the purpose section (Also Requirement 3)
 -->Kindly refer to the Dependency table displayed above to validate the strong components output.

 ===================================================================================
                 STRONG COMPONENTS
 ===================================================================================

Strong Component 1:  {
                        S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileD.h
                     }


Strong Component 2:  {
                        S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileC.h
                        S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileB.h
                        S:\OOD\OOD\ForProject2\CodeAnalyzer\FilesToTest\\FileA.h
                     }



==================================================
        REQUIREMENT NUMBER 7
==================================================

 Saving Dependency result to XML File
------------------------------------

 --> Saving the dependency analysis to XML File : ../XmlResult/DepAnalResult.xml
 --> Results are saved to the above file. It can be checked to validate this requirement.

 Saving Strong Component Result to XML File
---------------------------------------------

 --> Saving strong components to the XML file : ../XmlResult/StrongComponent.xml
 --> Strong components saved to the above mentioned file. It can be checked to validate this requirement.

===============================================
         REQUIREMENT NUMBER 9
===============================================
 -->All the above requirements have been demonstrated using an automated unit test executive suite.
 -->The project CodeAnalyzer/Executive.cpp can be checked to verify this requirement!!

================== END OF PROJECT DEMONSTRATION ====================



 NOTE: The performance metrics that are exceeding on applying codeanalyzer on this project have not been implemented or modified by me!!.